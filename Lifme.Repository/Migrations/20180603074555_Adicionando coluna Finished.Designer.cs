// <auto-generated />
using Lifme.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Lifme.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180603074555_Adicionando coluna Finished")]
    partial class AdicionandocolunaFinished
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lifme.Domain.Entity.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Badge","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Challenge","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdministratorId")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Image")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("Group","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Log.ChallengeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accept");

                    b.Property<int?>("ChallengeId")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("ChallengeLog","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Image")
                        .HasMaxLength(1024);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("Title");

                    b.Property<int?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.GroupUser", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.PostLike", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("UserId");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLike","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserBadge", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BadgeId");

                    b.HasKey("UserId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("UserBadge","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Accept");

                    b.Property<int?>("ChallengeId");

                    b.Property<bool>("Completed");

                    b.Property<DateTime>("DayChallenge");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("Finished");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallenge","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserFriend", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("FriendId");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriend","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserPending", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("PendingId");

                    b.HasKey("UserId", "PendingId");

                    b.HasIndex("PendingId");

                    b.ToTable("UserPending","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Feedback")
                        .HasMaxLength(255);

                    b.Property<bool>("Finished");

                    b.Property<int?>("GroupId");

                    b.Property<string>("Image")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Tournament","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar")
                        .HasMaxLength(1024);

                    b.Property<string>("Background")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Nickname")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("User","Lifme");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Group", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.User", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Log.ChallengeLog", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Post", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.GroupUser", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.PostLike", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserBadge", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserChallenge", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId");

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserFriend", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Relation.UserPending", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.User", "Pending")
                        .WithMany()
                        .HasForeignKey("PendingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lifme.Domain.Entity.User", "User")
                        .WithMany("Pendings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Lifme.Domain.Entity.Tournament", b =>
                {
                    b.HasOne("Lifme.Domain.Entity.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Lifme.Domain.Entity.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");
                });
#pragma warning restore 612, 618
        }
    }
}
